<?php

namespace RCatlin\Blog\Repository;

use Doctrine\ORM\EntityRepository;
use RCatlin\Blog\Entity;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends EntityRepository
{
    const TAG_COUNT_QUERY = <<< EOF
SELECT
    COUNT(a.id)
FROM
    MainBundle:Article a
WHERE
    :tid MEMBER OF a.tags
    AND
    a.active=1
EOF;

    const ARTICLE_COUNT_QUERY = <<< EOF
SELECT
    COUNT(a.id)
FROM
    MainBundle:Article a
WHERE
    a.active=1
EOF;

    /**
     * @param string $order
     *
     * @return mixed
     */
    public function findAll($order = 'DESC')
    {
        return $this->createQueryBuilder('a')
            ->orderBy('a.createdAt', $order)
            ->getQuery()
            ->execute()
        ;
    }

    /**
     * @param $offset
     * @param int    $limit
     * @param string $order
     *
     * @return array|null
     */
    public function findAllActiveArticles($offset, $limit = 5, $order = 'DESC')
    {
        $qb = $this->createQueryBuilder('a');

        $eq = $qb->expr()->eq(
            'a.active',
            '1'
        );

        return $qb->where($eq)
            ->setFirstResult($offset)
            ->setMaxResults($limit)
            ->orderBy('a.createdAt', $order)
            ->getQuery()
            ->execute()
        ;
    }

    /**
     * @param $slug
     *
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     *
     * @return mixed
     */
    public function findActiveBySlug($slug)
    {
        $qb = $this->createQueryBuilder('a');

        $slug = $qb->expr()
            ->eq(
                'a.slug',
                sprintf("'%s'", $slug)
            )
        ;
        $active = $qb->expr()
            ->eq(
                'a.active',
                '1'
            )
        ;

        return $qb->where($slug)
            ->andWhere($active)
            ->getQuery()
            ->getSingleResult()
        ;
    }

    /**
     * @param Entity\Tag $tag
     * @param int        $offset
     * @param int        $limit
     * @param string     $order
     *
     * @return mixed
     */
    public function findActiveByTag(Entity\Tag $tag, $offset = 0, $limit = 5, $order = 'DESC')
    {
        $qb = $this->createQueryBuilder('a')
            ->join('a.tags', 't')
        ;

        $id = $qb->expr()->in(
            't.id',
            [
                $tag->getId(),
            ]
        );

        $active = $qb->expr()->eq(
            'a.active',
            '1'
        );

        return $qb->where($id)
            ->andWhere($active)
            ->setFirstResult($offset)
            ->setMaxResults($limit)
            ->orderBy('a.createdAt', $order)
            ->getQuery()
            ->execute()
        ;
    }

    /**
     * @param int    $offset
     * @param int    $limit
     * @param string $order
     *
     * @return mixed
     */
    public function findTitles($offset = 0, $limit = 10, $order = 'DESC')
    {
        $qb = $this->createQueryBuilder('a')
            ->select(
                'a.id',
                'a.title',
                'a.slug',
                'a.createdAt'
            )
        ;

        $active = $qb->expr()->eq(
            'a.active',
            '1'
        );

        return $qb->where($active)
            ->setFirstResult($offset)
            ->setMaxResults($limit)
            ->orderBy('a.createdAt', $order)
            ->getQuery()
            ->execute()
        ;
    }

    /**
     * @return mixed
     */
    public function getActiveTotalCount()
    {
        return $this->getEntityManager()
            ->createQuery(
                self::ARTICLE_COUNT_QUERY
            )
            ->getSingleScalarResult()
        ;
    }

    /**
     * @param Entity\Tag|null $tag
     *
     * @return mixed
     */
    public function getActiveTotalCountByTag(Entity\Tag $tag = null)
    {
        return $this->getEntityManager()
            ->createQuery(
                    self::TAG_COUNT_QUERY
            )
            ->setParameter('tid', $tag->getId())
            ->getSingleScalarResult()
        ;
    }
}
