<?php

namespace MyProject\Bundle\MainBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends EntityRepository
{
    const TAG_COUNT_QUERY = <<< EOF
SELECT
    COUNT(a.id)
FROM
    MainBundle:Article a
WHERE
    :tid MEMBER OF a.tags
EOF;

    const ARTICLE_COUNT_QUERY = <<< EOF
SELECT
    COUNT(a.id)
FROM
    MainBundle:Article a
EOF;

    public function findAll($order = 'DESC')
    {
        return $this->createQueryBuilder('a')
            ->orderBy('a.createdAt', $order)
            ->getQuery()
            ->execute()
        ;
    }

    public function findAllActiveArticles($offset, $limit = 5, $order = 'DESC')
    {
        $qb = $this->createQueryBuilder('a');

        $eq = $qb->expr()->eq(
            'a.active',
            '1'
        );

        return $qb->where($eq)
            ->setFirstResult($offset)
            ->setMaxResults($limit)
            ->orderBy('a.createdAt', $order)
            ->getQuery()
            ->execute()
        ;
    }

    public function findActiveBySlug($slug)
    {
        $qb = $this->createQueryBuilder('a');

        $slug = $qb->expr()
            ->eq(
                'a.slug',
                sprintf("'%s'", $slug)
            )
        ;
        $active = $qb->expr()
            ->eq(
                'a.active',
                '1'
            )
        ;

        return $qb->where($slug)
            ->andWhere($active)
            ->getQuery()
            ->getSingleResult()
        ;
    }

    public function findActiveByTag(Tag $tag, $offset = 0, $limit = 5, $order = 'DESC')
    {
        $qb = $this->createQueryBuilder('a')
            ->join('a.tags', 't')
        ;

        $id = $qb->expr()->in(
            't.id',
            array(
                $tag->getId(),
            )
        );

        $active = $qb->expr()->eq(
            'a.active',
            '1'
        );

        return $qb->where($id)
            ->andWhere($active)
            ->setFirstResult($offset)
            ->setMaxResults($limit)
            ->orderBy('a.createdAt', $order)
            ->getQuery()
            ->execute()
        ;
    }

    public function findTitles($offset = 0, $limit = 10, $order = 'DESC')
    {
        $qb = $this->createQueryBuilder('a')
            ->select(
                'a.id',
                'a.title',
                'a.slug',
                'a.createdAt'
            )
        ;

        $active = $qb->expr()->eq(
            'a.active',
            '1'
        );

        return $qb->where($active)
            ->setFirstResult($offset)
            ->setMaxResults($limit)
            ->orderBy('a.createdAt', $order)
            ->getQuery()
            ->execute()
        ;
    }

    public function getTotalCount()
    {
        return $this->getEntityManager()
            ->createQuery(
                self::ARTICLE_COUNT_QUERY
            )
            ->getSingleScalarResult()
        ;
    }

    public function getTotalCountByTag(Tag $tag = null)
    {
        return $this->getEntityManager()
            ->createQuery(
                    self::TAG_COUNT_QUERY
            )
            ->setParameter('tid', $tag->getId())
            ->getSingleScalarResult()
        ;
    }
}
